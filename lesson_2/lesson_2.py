'''
lesson 2
'''
import os
from glob import glob
from chardet.universaldetector import UniversalDetector
import csv
import json
import yaml
import re
from datetime import datetime
'''
1. 
–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –ø–æ –º–æ–¥—É–ª—é CSV. –ù–∞–ø–∏—Å–∞—Ç—å —Å–∫—Ä–∏–ø—Ç, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—â–∏–π –≤—ã–±–æ—Ä–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ 
info_1.txt, info_2.txt, info_3.txt –∏ —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π –Ω–æ–≤—ã–π ¬´–æ—Ç—á–µ—Ç–Ω—ã–π¬ª —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV. –î–ª—è —ç—Ç–æ–≥–æ:

–°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é get_data(), –≤ –∫–æ—Ç–æ—Ä–æ–π –≤ —Ü–∏–∫–ª–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–±–æ—Ä —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏, –∏—Ö –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö. 
–í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ 
¬´–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã¬ª, ¬´–ù–∞–∑–≤–∞–Ω–∏–µ –û–°¬ª, ¬´–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞¬ª, ¬´–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã¬ª. –ó–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ 
—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫. –î–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è —á–µ—Ç—ã—Ä–µ —Å–ø–∏—Å–∫–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 
os_prod_list, os_name_list, os_code_list, os_type_list. –í —ç—Ç–æ–π –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è 
—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, main_data ‚Äî –∏ –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ –Ω–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –æ—Ç—á–µ—Ç–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞: 
¬´–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã¬ª, ¬´–ù–∞–∑–≤–∞–Ω–∏–µ –û–°¬ª, ¬´–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞¬ª, ¬´–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã¬ª. –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–∫–∂–µ –æ—Ñ–æ—Ä–º–∏—Ç—å 
–≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∏ –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ —Ñ–∞–π–ª main_data (—Ç–∞–∫–∂–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞);
–°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é write_to_csv(), –≤ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ CSV-—Ñ–∞–π–ª. 
–í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_data(), 
–∞ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π CSV-—Ñ–∞–π–ª;
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ write_to_csv().
'''

os.chdir('.')
names = glob('*.txt')


def detector_coding(file:str):
    '''
    :param file: filename > 'file.txt'
    :return: coding > 'utf-8'
    '''
    detector = UniversalDetector()
    detector.reset()
    for line in open(file, 'rb'):
        detector.feed(line)
        if detector.done:
            break
    detector.close()
    return detector.result['encoding']


def get_data(list_files:list):
    '''
    :param list_files: list with filenames
    :return: list
    '''
    main_data = [['–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã', '–ù–∞–∑–≤–∞–Ω–∏–µ –û–°', '–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞', '–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã']]
    os_prod_list, os_name_list, os_code_list, os_type_list = [], [], [], []
    for name in list_files:
        encoding = detector_coding(name)
        with open(name, 'r', encoding=encoding) as f:
            string_file = f.read()

            for line in string_file.split('\n'):
                if re.fullmatch(r'^–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã.+', line):
                    os_prod_list.append(re.search(r'[A-Z].+', line)[0])
                if re.fullmatch(r'^–ù–∞–∑–≤–∞–Ω–∏–µ –û–°.+', line):
                    os_name_list.append(re.search(r'[A-Z].+', line)[0])
                if re.fullmatch(r'^–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞.+', line):
                    os_code_list.append(re.search(r'\d{5}.\w{3}.\d{7}.\d{5}', line)[0])
                if re.fullmatch(r'^–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã.+', line):
                    os_type_list.append(re.search(r'x\d\d.+', line)[0])

    for prod, name, code, type in zip(os_prod_list, os_name_list, os_code_list, os_type_list):
        main_data.append([prod, name, code, type])

    return main_data


def write_to_csv(file:str):
    '''
    :param file: filename > 'file.csv'
    '''
    with open(file, 'w',encoding='utf-8') as f:
        f_writer = csv.writer(f)
        for row in get_data(names):
            f_writer.writerow(row)


'''
2. 
–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –ø–æ –º–æ–¥—É–ª—é json. –ï—Å—Ç—å —Ñ–∞–π–ª orders –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–∞—Ö. 
–ù–∞–ø–∏—Å–∞—Ç—å —Å–∫—Ä–∏–ø—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é—â–∏–π –µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏. –î–ª—è —ç—Ç–æ–≥–æ:

–°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é write_order_to_json(), –≤ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è 5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Äî —Ç–æ–≤–∞—Ä (item), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (quantity), 
—Ü–µ–Ω–∞ (price), –ø–æ–∫—É–ø–∞—Ç–µ–ª—å (buyer), –¥–∞—Ç–∞ (date). –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö 
–≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –≤ —Ñ–∞–π–ª orders.json. –ü—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö —É–∫–∞–∑–∞—Ç—å –≤–µ–ª–∏—á–∏–Ω—É –æ—Ç—Å—Ç—É–ø–∞ –≤ 4 –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞;
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ write_order_to_json() —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ –Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
'''

def write_order_to_json(item:str, quantity:int, price:float, buyer:str, date:datetime):
    '''
    write dict to json
    :param item: str
    :param quantity: int
    :param price: float
    :param buyer: str
    :param date: datetime
    '''
    dict_to_json = {'item': item, 'quantity': quantity, 'price': price, 'buyer': buyer, 'date': date}
    with open('orders.json', 'w', encoding='utf-8') as f:
        json.dump(dict_to_json, f, indent=4, ensure_ascii=False)


'''
3. 
–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –ø–æ –º–æ–¥—É–ª—é yaml. –ù–∞–ø–∏—Å–∞—Ç—å —Å–∫—Ä–∏–ø—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é—â–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö 
–≤ —Ñ–∞–π–ª–µ YAML-—Ñ–æ—Ä–º–∞—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ:

–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä–≤–æ–º—É –∫–ª—é—á—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ø–∏—Å–æ–∫, 
–≤—Ç–æ—Ä–æ–º—É ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ç—Ä–µ—Ç—å–µ–º—É ‚Äî –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ ‚Äî —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å —é–Ω–∏–∫–æ–¥-—Å–∏–º–≤–æ–ª–æ–º, 
–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ ASCII (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚Ç¨);
–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ YAML ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ–∞–π–ª file.yaml. 
–ü—Ä–∏ —ç—Ç–æ–º –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ default_flow_style, 
–∞ —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å —é–Ω–∏–∫–æ–¥–æ–º: allow_unicode = True;
–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –æ–Ω–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏.
'''

def write_orders_to_yaml(data:dict):
    '''
    write data to yaml-file
    :param data: dict
    '''
    with open('file.yaml', 'w') as f:
        yaml.dump(data, f, default_flow_style=False, allow_unicode=True, sort_keys=False)



if __name__ == '__main__':
    write_to_csv('test.csv')
    write_order_to_json('–¢–æ–≤–∞—Ä', 54, 5000.00, '–ò–≤–∞–Ω–æ–≤ –ò.–ò.', '08/02/2022')
    write_orders_to_yaml({'first_key': [1,2,3],'second_key': 5, 'third_key': {'–æ–¥–∏–Ω':'1 üêà', '–¥–≤–∞': '2 üêâ'}})
